<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="modx.prosilver.en.xsl"?>
<!--NOTICE: Please open this file in your web browser. If presented with a security warning, you may safely tell it to allow the blocked content.-->
<!--For security purposes, please check: http://www.phpbb.com/mods/ for the latest version of this MOD.\nAlthough MODs are checked before being allowed in the MODs Database there is no guarantee that there are no security problems within the MOD.\nNo support will be given for MODs not found within the MODs Database which can be found at http://www.phpbb.com/mods/-->
<mod xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="https://www.phpbb.com/mods/xml/modx-1.2.6.xsd">
	<header>
		<meta name="generator" content="MODX file generated with PP MODX Creator by tumba25 (online version)"/>
		<license><![CDATA[http://opensource.org/licenses/gpl-license.php GNU General Public License v2]]></license>
		<title lang="en"><![CDATA[PGP encryption for PM]]></title>
		<title lang="ru"><![CDATA[Шифрование PGP для личных сообщений]]></title>
		<description lang="en"><![CDATA[Adds ability to exchange PMs encrypted with PGP]]></description>
		<description lang="ru"><![CDATA[Добавляет возможность обмениваться шифрованными ЛС]]></description>
		<author-notes lang="en"><![CDATA[Note:
- To install this mod correctly, first run this installer. Then make sure to run the "install_pm_pgp.php" file in the root directory of your forum.
- To uninstall, first run the "install_pm_pgp.php" file and then uninstall the mod from the Admin Panel.]]></author-notes>
		<author-notes lang="ru"><![CDATA[Примечания:
- Для правильной установки этого дополнения, сперва запустите этот установщик. Затем обязательно запустите файл "install_pm_pgp.php" из корневого каталога вашего форума.
- Для удаления, сперва запустите файл "install_pm_pgp.php", а затем удалите дополнение через Администраторский Раздел.]]></author-notes>
		<author-group>
			<author>
				<realname><![CDATA[Mwamba Natanga]]></realname>
				<username phpbbcom="no"><![CDATA[Mwamba Natanga]]></username>
				<email><![CDATA[mwambanatanga@gmail.com]]></email>
			</author>
		</author-group>
		<mod-version>1.0.0</mod-version>
		<installation>
			<level>easy</level>
			<time>300</time>
			<target-version>3.0.11</target-version>
		</installation>
	</header>
	<action-group>
		<copy>
			<file from="root/keydown.php" to="keydown.php"/>
		</copy>
		<copy>
			<file from="root/install_pm_pgp_mod.php" to="install_pm_pgp_mod.php"/>
		</copy>
		<copy>
			<file from="root/includes/functions_pm_pgp.php" to="includes/functions_pm_pgp.php"/>
		</copy>
		<copy>
			<file from="root/pm_pgp/*.*" to="pm_pgp/*.*"/>
		</copy>
		<copy>
			<file from="root/language/*.*" to="language/*.*"/>
		</copy>
		<copy>
			<file from="root/styles/prosilver/template/ucp_profile_pgp_key.html" to="styles/prosilver/template/ucp_profile_pgp_key.html"/>
		</copy>
		<open src="includes/constants.php">
			<edit>
				<find><![CDATA[// Additional tables]]></find>
				<action type="after-add"><![CDATA[define('PGP_KEYS_TABLE', $table_prefix . 'pgp_keys');]]></action>
			</edit>
		</open>
		<open src="includes/functions.php">
			<edit>
				<find><![CDATA[	$user_lang = $user->lang['USER_LANG'];]]></find>
				<action type="after-add"><![CDATA[	$user->add_lang('mods/pm_pgp');]]></action>
			</edit>
		</open>
		<open src="memberlist.php">
			<edit>
				<find><![CDATA[case 'viewprofile':]]></find>
				<action type="after-add"><![CDATA[		include($phpbb_root_path . 'includes/functions_pm_pgp.' . $phpEx);]]></action>
			</edit>
			<edit>
				<find><![CDATA[// Filter out hidden groups and sort groups by name]]></find>
				<action type="before-add"><![CDATA[		$user->add_lang('mods/pm_pgp');
		$pgp_data = get_pgp_data($user_id);
		$fingerprint = $pgp_data['fingerprint'];
		]]></action>
			</edit>
			<edit>
				<find><![CDATA[	'U_REMOVE_FOE'		=> ($foe && $foes_enabled) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=zebra&amp;remove=1&amp;mode=foes&amp;usernames[]=' . $user_id) : '',]]></find>
				<action type="after-add"><![CDATA[			'U_PGP_FINGERPRINT'		=> chunk_split(strtoupper(substr($fingerprint, -8)), 2, ' '),
			'U_PGP_DOWNLOAD_URL'		=> "keydown.php?u=" . $user_id,
			'U_PGP_DOWNLOAD'		=> !empty($fingerprint) ? true : false,]]></action>
			</edit>
		</open>
		<open src="styles/prosilver/template/memberlist_view.html">
			<edit>
				<find><![CDATA[<dl class="details">]]></find>
				<action type="after-add"><![CDATA[		<dt>{L_PGP_KEY}</dt><dd><!-- IF U_PGP_DOWNLOAD --><a href="{SITE_ROOT}{U_PGP_DOWNLOAD_URL}">{U_PGP_FINGERPRINT}</a><!-- ELSE -->{L_PGP_KEY_NOT_UPLOADED}<!-- ENDIF --></dd>
]]></action>
			</edit>
		</open>
		<open src="styles/prosilver/template/overall_header.html">
			<edit>
				<find><![CDATA[<script type="text/javascript" src="{T_SUPER_TEMPLATE_PATH}/forum_fn.js"></script>]]></find>
				<action type="after-add"><![CDATA[<!-- IF LOAD_PGP_JS --><script type="text/javascript" language="Javascript" src="pm_pgp/openpgp.js"></script><!-- ENDIF -->
]]></action>
			</edit>
		</open>
		<open src="includes/ucp/ucp_profile.php">
			<edit>
				<find><![CDATA['S_DISPLAY_GALLERY'		=> ($auth->acl_get('u_chgavatar') && $config['allow_avatar_local']) ? true : false)
					);
				}

			break;]]></find>
				<action type="after-add"><![CDATA[

			case 'pgp_key':
				include($phpbb_root_path . 'includes/functions_pm_pgp.' . $phpEx);
				$user->add_lang('mods/pm_pgp');

				$data = array(
					'user_id'	=> $user->data['user_id'],
					'pgp_key'	=> request_var('pgp_key', ''),
					'fingerprint'	=> request_var('fingerprint', ''),
					'key_user'	=> request_var('key_user', ''),
					'key_type'	=> request_var('key_type', ''),
				);

				add_form_key('ucp_pgp_key');
				if ($submit)
				{
					if (!check_form_key('ucp_pgp_key'))
					{
						$error[] = 'FORM_INVALID';
					}

					if (!sizeof($error))
					{
						//validate first!!!

						if (empty($data['pgp_key']))
						{
							delete_pgp_key($data['user_id']);
							meta_refresh(3, $this->u_action);
							$message = $user->lang['PGP_KEY_DELETED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');
						}
						else if (empty($data['fingerprint']))
						{
							meta_refresh(3, $this->u_action);
							$message = $user->lang['BAD_PGP_KEY'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');
						}
						else
						{
							put_pgp_data($data);
							meta_refresh(3, $this->u_action);
							$message = $user->lang['PGP_KEY_UPLOADED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');
						}
						trigger_error($message);
					}
				}

				if (user_has_pgp_key($user->data['user_id'])) {
					$pgp_data = get_pgp_data($user->data['user_id']);
					$data['pgp_key'] = $pgp_data['pgp_key'];
					$data['fingerprint'] = $pgp_data['fingerprint'];
					$data['key_user'] = $pgp_data['key_user'];
					$data['key_type'] = $pgp_data['key_type'];
				}

				$template->assign_vars(array(
					'PGP_KEY_BLOCK'		=> $data['pgp_key'],
					'PGP_FINGERPRINT'	=> strtoupper($data['fingerprint']),
					'KEY_USER'		=> $data['key_user'],
					'KEY_TYPE'		=> $data['key_type'],
					'LOAD_PGP_JS'		=> true,)
				);
			break;
]]></action>
			</edit>
		</open>
		<open src="includes/ucp/ucp_pm_compose.php">
			<edit>
				<find><![CDATA[include($phpbb_root_path . 'includes/message_parser.' . $phpEx);]]></find>
				<action type="after-add"><![CDATA[	//start PGP code
	include($phpbb_root_path . 'includes/functions_pm_pgp.' . $phpEx);
	//end PGP code]]></action>
			</edit>
			<edit>
				<find><![CDATA[if ($type == 'u')
				{]]></find>
				<action type="after-add"><![CDATA[					$pgp_data = get_pgp_data($id);]]></action>
			</edit>
			<edit>
				<find><![CDATA['NAME_FULL'		=> get_username_string('full', $id, ${$type}[$id]['name'], ${$type}[$id]['colour']),]]></find>
				<action type="after-add"><![CDATA[						'FINGERPRINT'		=> ($pgp_data['fingerprint']) ? strtoupper(substr($pgp_data['fingerprint'], -8)) : '',
						'ID'			=> $id,]]></action>
			</edit>
			<edit>
				<find><![CDATA['UA_PROGRESS_BAR'			=> addslashes(append_sid("{$phpbb_root_path}posting.$phpEx", 'f=0&amp;mode=popup')),]]></find>
				<action type="after-add"><![CDATA[		'LOAD_PGP_JS'			=> true,
		'PGP_PUBLIC_KEY_LOOKUP'			=> $user->lang['PGP_PUBLIC_KEY_LOOKUP'],
		'PGP_ENCRYPT_OK'			=> $user->lang['PGP_ENCRYPT_OK'],
		'PGP_ENCRYPT_FAIL'			=> $user->lang['PGP_ENCRYPT_FAIL'],
		'PGP_USER_NOT_SELECTED'			=> $user->lang['PGP_USER_NOT_SELECTED'],
		'PGP_ALREADY_ENCRYPTED'			=> $user->lang['PGP_ALREADY_ENCRYPTED'],]]></action>
			</edit>
		</open>
		<open src="includes/ucp/ucp_pm.php">
			<edit>
				<find><![CDATA[$template->assign_var('S_PRIVMSGS', true);]]></find>
				<action type="after-add"><![CDATA[//start PGP code
		$template->assign_var('L_PGP_ENCRYPT', $user->lang['PGP_ENCRYPT']);
//end PGP code]]></action>
			</edit>
		</open>
		<open src="includes/ucp/ucp_pm_viewmessage.php">
			<edit>
				<find><![CDATA[$user_info = get_user_information($author_id, $message_row);]]></find>
				<action type="after-add"><![CDATA[
	$encrypted = preg_match("/-----BEGIN PGP MESSAGE-----/", $message_row['message_text']);
	if (!$encrypted) {]]></action>
			</edit>
			<edit>
				<find><![CDATA[$message = smiley_text($message);]]></find>
				<action type="after-add"><![CDATA[	}
	else {
		$message = $message_row['message_text'];
	}]]></action>
			</edit>
			<edit>
				<find><![CDATA[	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;]]></find>
				<action type="after-add"><![CDATA[//PGP code start
	$user->add_lang('mods/pm_pgp');
//PGP code end]]></action>
			</edit>
			<edit>
				<find><![CDATA['U_FORWARD_PM'		=> ($config['forward_pm'] && $auth->acl_get('u_sendpm') && $auth->acl_get('u_pm_forward')) ? "$url&amp;mode=compose&amp;action=forward&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '')]]></find>
				<action type="replace-with"><![CDATA['U_FORWARD_PM'		=> ($config['forward_pm'] && $auth->acl_get('u_sendpm') && $auth->acl_get('u_pm_forward')) ? "$url&amp;mode=compose&amp;action=forward&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',
		'LOAD_PGP_JS'		=> $encrypted,
		'PGP_BROWSER_NOT_SUPPORTED'	=> $user->lang['PGP_BROWSER_NOT_SUPPORTED'],
		'PRIVATE_PGP_KEY'	=> $user->lang['PRIVATE_PGP_KEY'],
		'PGP_FINGERPRINT'	=> $user->lang['PGP_FINGERPRINT'],
		'PGP_KEY_USER_ID'	=> $user->lang['PGP_KEY_USER_ID'],
		'PGP_PASSPHRASE'	=> $user->lang['PGP_PASSPHRASE'],
		'PGP_ENCRYPTION_NOTICE'	=> $user->lang['PGP_ENCRYPTION_NOTICE'],
		'PGP_DECRYPT_TAKE_TIME'	=> $user->lang['PGP_DECRYPT_TAKE_TIME'],
		'PGP_NOT_KEY'		=> $user->lang['PGP_NOT_KEY'],
		'PGP_MATCH'			=> $user->lang['PGP_MATCH'],
		'PGP_DECRYPT_OK'		=> $user->lang['PGP_DECRYPT_OK'],
		'PGP_DECRYPT_FAIL'			=> $user->lang['PGP_DECRYPT_FAIL'],
		'PGP_DECRYPT'			=> $user->lang['PGP_DECRYPT'],
		)]]></action>
			</edit>
		</open>
		<open src="includes/ucp/info/ucp_profile.php">
			<edit>
				<find><![CDATA['reg_details'	=> array('title' => 'UCP_PROFILE_REG_DETAILS', 'auth' => '', 'cat' => array('UCP_PROFILE')),]]></find>
				<action type="after-add"><![CDATA[				'pgp_key'	=> array('title' => 'UCP_PROFILE_PGP_KEY', 'auth' => '', 'cat' => array('UCP_PROFILE')),]]></action>
			</edit>
		</open>
		<open src="styles/prosilver/template/ucp_pm_message_header.html">
			<edit>
				<find><![CDATA[<h2>{L_TITLE}<!-- IF CUR_FOLDER_NAME -->: {CUR_FOLDER_NAME}<!-- ENDIF --></h2>]]></find>
				<action type="after-add"><![CDATA[<script>
var pgp_msg = '';
var pgpMessage = '';
var pgp_msg_fingerprint = '';
var pgp_private_key = '';
var pgp_key_password = '';
var privateKey = '';

function read_priv_key_file()
{
  if (!window.File || !window.FileReader) {
    document.getElementById('decrypt_status').innerHTML = "{PGP_BROWSER_NOT_SUPPORTED}";
    return;
  }
  var reader = new FileReader();
  var file = private_key.files[0];
  var key_id = '';
  reader.onload = function(e) {
    pgp_private_key = reader.result;
    privateKey = window.openpgp.key.readArmored(pgp_private_key).keys[0];
    if (typeof privateKey === 'undefined') {
      document.getElementById("fingerprint").value = '';
      document.getElementById("key_ok").innerHTML = '';
      document.getElementById("key_id").value = '';
      document.getElementById('decrypt_status').innerHTML = "<font color='red'>{PGP_NOT_KEY}</font>";
      return;
    }
    // let's find the corresponding signing key id
    for (i = 0; i < privateKey.subKeys.length; i++) {
      key_id = privateKey.subKeys[i].subKey.getFingerprint();
//      key_id = key_id.substr(key_id.length - 8).toUpperCase();
      if (key_id = pgp_msg_fingerprint) {
        document.getElementById("fingerprint").value = key_id.substr(key_id.length - 8).toUpperCase();
        document.getElementById("key_ok").innerHTML = "<font color='green'>{PGP_MATCH}</font>";
        document.getElementById('decrypt_status').innerHTML = "{PGP_DECRYPT_TAKE_TIME}";
        break;
      }
    }
    document.getElementById("key_id").value = privateKey.users[0].userId.userid;
  }
  reader.readAsText(file);
}

function pgp_decrypt() {
  pgp_key_password = document.getElementById("pgp_key_password").value;
  privateKey.decrypt(pgp_key_password);
  window.openpgp.decryptMessage(privateKey, pgpMessage).then(function(plaintext) {
    // success
      document.getElementsByClassName("content")[0].innerHTML = plaintext;
      document.getElementById('decrypt_status').innerHTML = "<font color='green'>{PGP_DECRYPT_OK}</font>";
  }).catch(function(error) {
    document.getElementById('decrypt_status').innerHTML = "<font color='red'>{PGP_DECRYPT_FAIL}</font>";
  });
}
</script>]]></action>
			</edit>
			<edit>
				<find><![CDATA[<!-- IF U_POST_REPLY_PM and S_PM_RECIPIENTS gt 1 --><div class="reply-all"><a class="left" title="{L_REPLY_TO_ALL}" href="{U_POST_REPLY_ALL}">{L_REPLY_TO_ALL}</a></div><!-- ENDIF -->
		</div>]]></find>
				<action type="after-add"><![CDATA[			<!-- IF LOAD_PGP_JS --><div class="clear"></div><div><div id="encryption_notice">{PGP_ENCRYPTION_NOTICE}</div>
<fieldset class="fields1">
  <dl>
    <dt><label for="private_key">{PRIVATE_PGP_KEY}:</label></dt>
    <dd><input id="private_key" name="private_key" type="file" onchange="read_priv_key_file();"/></dd>
  </dl>
  <dl>
    <dt><label for="fingerprint">{PGP_FINGERPRINT}:</label></dt>
    <dd><input type="text" id="fingerprint" name="fingerprint" disabled><span id="key_ok"></span></dd>
  </dl>
  <dl>
    <dt><label for="user_id">{PGP_KEY_USER_ID}:</label></dt>
    <dd><input type="text" id="key_id" name="user_id" disabled></dd>
  </dl>
  <dl>
    <dt><label for="passphrase">{PGP_PASSPHRASE}:</label></dt>
    <dd><input type="password" id="pgp_key_password" name="pgp_key_password"></dd>
  </dl>
</fieldset>
<input type="button" name="decrypt" value="{PGP_DECRYPT}" onclick="pgp_decrypt();"> <span id="decrypt_status">{PGP_DECRYPT_TAKE_TIME}</span></div><!-- ENDIF -->]]></action>
			</edit>
		</open>
		<open src="styles/prosilver/template/ucp_pm_viewmessage.html">
			<edit>
				<find><![CDATA[<!-- IF S_DISPLAY_HISTORY --><!-- INCLUDE ucp_pm_history.html --><!-- ENDIF -->]]></find>
				<action type="after-add"><![CDATA[<!-- IF LOAD_PGP_JS -->
<script>
pgp_msg=document.getElementsByClassName("content")[0].innerHTML;
pgpMessage = window.openpgp.message.readArmored(pgp_msg);
pgp_msg_fingerprint = pgpMessage.packets[0].publicKeyId.toHex();
document.getElementById("encryption_notice").innerHTML = document.getElementById("encryption_notice").innerHTML.replace('\{1\}', pgp_msg_fingerprint.substr(pgp_msg_fingerprint.length - 8).toUpperCase());
</script>
<!-- ENDIF -->]]></action>
			</edit>
		</open>
		<open src="styles/prosilver/template/posting_editor.html">
			<edit>
				<find><![CDATA[<!-- IF to_recipient.IS_GROUP --><a href="{to_recipient.U_VIEW}"><strong>{to_recipient.NAME}</strong></a>&nbsp;<!-- ELSE -->{to_recipient.NAME_FULL}&nbsp;]]></find>
				<action type="after-add"><![CDATA[<!-- IF to_recipient.FINGERPRINT -->({to_recipient.FINGERPRINT})<input type="hidden" class="keys" id="{to_recipient.ID}" value="{to_recipient.NAME}">&nbsp;<!-- ENDIF -->]]></action>
			</edit>
			<edit>
				<find><![CDATA[<input type="submit" accesskey="s" tabindex="6" name="post" value="{L_SUBMIT}" class="button1 default-submit-action" />&nbsp;

		</fieldset>]]></find>
				<action type="replace-with"><![CDATA[			<input type="submit" accesskey="s" tabindex="6" name="post" value="{L_SUBMIT}" class="button1 default-submit-action" />&nbsp;
			<!-- IF S_PRIVMSGS --><input type="button" accesskey="e" tabindex="6" name="post" value="{L_PGP_ENCRYPT}" class="button1" onclick="show_encryption_panel();"/>&nbsp;<!-- ENDIF -->
		</fieldset>
<script>
var keytyp = -1;
var pktype = -1;
var keyid  = '';
var pubkey = '';
var public_key = '';
var list_generated = 0;

function is_encrypted() {
  var text=document.getElementById("message").value;
  if (text.includes("-----BEGIN PGP MESSAGE-----") && text.includes("-----END PGP MESSAGE-----")) return true;
  else return false;
}

function show_encryption_panel() {
  generate_pgp_userlist();
  var pgpopts=document.getElementById('encryption_options');
  pgpopts.style.display = (pgpopts.style.display != 'none' ? 'none' : '' );
}

function generate_pgp_userlist() {
  if (list_generated == 1) return;
  var recipients_parent = document.getElementById("recipients_with_key");
  var userlist_html_text = '';
  var aTag;
  var aDiv;
  var userlist = document.getElementsByClassName("keys");
  if (userlist.length == 0) recipients_parent.value = "{PGP_USER_NOT_SELECTED}";
  else {
    for (i = 0; i < userlist.length; i++) {
      aDiv = document.createElement("div");
      aDiv.id = "user-" + userlist[i].id;
      aDiv.innerHTML = "&nbsp;" + userlist[i].value + "&nbsp;";
      aDiv.className = "username-coloured";
      aDiv.setAttribute("onclick", "encrypt(" + userlist[i].id + ")");
      recipients_parent.appendChild(aDiv);
    }
  }
  list_generated = 1;
}

function get_key(user_id) {
  document.getElementById("encryption_status").innerHTML = "{PGP_PUBLIC_KEY_LOOKUP}";
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (xhttp.readyState == 4 && xhttp.status == 200) {
      public_key = xhttp.responseText;
    }
  };
  xhttp.open("GET", "{SITE_ROOT}keydown.php?u=" + user_id, false);
  xhttp.send();
}

function encrypt(recipient)
{
  if (is_encrypted()) {
    document.getElementById("encryption_status").innerHTML = "<font color='red'>{PGP_ALREADY_ENCRYPTED}</font>";
    return;
  }
  get_key(recipient);
  var publicKey = openpgp.key.readArmored(public_key);
  var text=document.getElementById("message").value;
  openpgp.encryptMessage(publicKey.keys, text).then(function(pgpMessage) {
    document.getElementById("message").value = pgpMessage;
    document.getElementById("encryption_status").innerHTML = "<font color='green'>{PGP_ENCRYPT_OK}</font>";
  }).catch(function(error) {
    document.getElementById("encryption_status").innerHTML = "<font color='red'>{PGP_ENCRYPT_FAIL}</font>";
  });
}
</script>
<div id="encryption_options" style="display: none;"><font color="red">Шифрование работает в тестовом режиме. Просьба сообщать обо всех неожиданностях.</font><hr>Чтобы зашифровать сообщение, кликните по нику адресата ниже (можно выбрать лишь одного адресата):<br><br><div id="recipients_with_key"></div><br><br><span id="encryption_status"></span></div>]]></action>
			</edit>
		</open>
		<php-installer><![CDATA[install_pm_pgp_mod.php]]></php-installer>
		<diy-instructions lang="en"><![CDATA[install_pm_pgp_mod.php - there is a PHP install file that needs to be run in order to complete the installation. To run it point your browser to, for example, domain.tld/phpBB3/install_pm_pgp_mod.php. After installation remove file install_pm_pgp_mod.php and purge cache.]]></diy-instructions>
	</action-group>
</mod>
